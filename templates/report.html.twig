{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}
    <div class="two-col-layout">
    <aside class="aside">
        <div>
            <h4>Innehållsförtäckning</h4>
            <ul>
                <li><a href="#kmom01">kmom01</a></li>
                <li><a href="#kmom02">kmom02</a></li>
                <li><a href="#kmom03">kmom03</a></li>
                <li><a href="#kmom04">kmom04</a></li>
                <li><a href="#kmom05">kmom05</a></li>
                <li><a href="#kmom06">kmom06</a></li>
                <li><a href="#kmom10">kmom10</a></li>
            </ul>
        </div>
    </aside>

    <main class="main courier">
            <h1>Redovisning</h1>
            <h2 id="kmom01">kmom01</h2>
            <p>
                Jag har läst kursen objektorienteradpython och upplevde att det var lite nytt tänk då för mig men in i kmom03 kändes allting ganska logiskt. Jag kan lite granna om 
                objektorientering och tycker inte att jag upplevde att den var svår då.
            </p>
            <p>
                Det som man behöver veta, för att kunna skapa en klass i PHP är att objektorienterad programmering är som vanlig (procedurprogrammering) programmering men vi inkapslar
                in metoder (som vi annars kallar för funktioner) och medlemsvariabler (variabler). Vi initierar en class med nyckelordet class och vi kan initiera en objekt som får
                med sig “alla” variabler och metoder som kan nås med this→.
            </p>
            <p>
                Jag upplever att kodbasen påminner ganska mycket om ramverket PICO som vi har arbetat med under kursen design. Jag upplever att de liknar mycket i logiken och i
                strukturen. Inga konstigheter tycker jag och strukturen verkar logisk och enkelt att förstå. Det blir säkert lite komplikationer på vägen men just nu under kmom01
                verkar den mycket lik PICO.
            </p>
            <p>
                Kapitel 4: Language highlights och i den nämns namespaces som låter rimligt och logiskt men jag vill prova öva för att veta mer om hur det fungerar. Kapitel 5:
                Dependency management är också mycket intressant. Nu i kurser får vi nästan alltid färdig bakad när det är arbetsmiljö vilket jag tycker är verkligen bra annars
                skulle man ju fastna mycket i början men det är något jag verkligen skulle vilja lära mig mer om. Det  finns många andra saker också men jag håller mig kort här.
            </p>
            <h3>TIL</h3>
            <p>
                Grunden i symfony liksom om bilder, twig och router. Grundläggande intro till class i objektorienterad PHP.
            </p>
            <h2 id="kmom02">kmom02</h2>
            <p>
                Med hjälp av arv kan en klass ärva metoder och medlemsvariabler från basklassen så att subklass kan specialisera basklass genom att återanvända koden.
                Komposition betyder att en klass innehåller andra objekt från en annan klass som delar sin funktionalitet. Tex. en die och en hand. En hand kan innehålla flera die
                därmed en hand är en komposition av die.
            </p>
            <p>
                Ett trait är som ett multipelarv som kan återanvändas i flera olika klasser. Jag förstår det som att man kan definiera en funktion som en modul som kan anropas från
                samma källa i olika moduler. Men i objektorienterad blir det alltså trait så att samma kod kan användas (use) i flera andra klasser utan arv. Interface är ett löfte
                som tvingar en klass att implementera eller erbjuda metoder. Med hjälp av interface vet man vad en klass kommer att kunna hantera.
            </p>
            <p>
                Jag har tre klasser för att lösa uppgiften: en som skapar en card och en som skapar grafisk presentation av kortet genom att ersätta exempelvis “hearts” mot symbolen
                av hearts. Jag har en tredje klass Deck som då loopar genom två arrays och skapar en hel deck. CardGraphic har Card som basklass och Deck är en composition av
                CardGraphic.
            </p>
            <p>
                För att lösa uppgiften och uppfylla krav skapar jag en deck när landningssida för den här uppgiften öppnas. Det görs endast om det inte finns en befintlig deck och
                mha. det kan man få sin resterande deck i länken card/deck. Om man vill skapa en ny deck, då får man trycka på card/shuffle. När det gäller draw ett eller flera kort
                använder jag mig av metoder som är definierade i Deck klass. Jag är typ nöjd med min presentation av kortlek. Jag utnyttjar twig och kollar om kommande string har
                en viss value för att tilldela css klass så att jag kan få hjärta och rutor röda osv. Det hade kunnat lösa snyggare bilder tycker jag. Jag tror det funkar nu men
                det kan förbättras.När det gäller koden i klasser evaluerar jag med min begränsad kunskap att det ser bra ut. Jag kanske har en annan syn på det om någon vecka då
                får jag ändra koden enligt det.
            </p>
            <p>
                Tankesätt och arbetssätt skiljer väl inte så mycket från tidigare kurser trots att det är viss skillnad i strukturen. Jag upplever jobbet i symfony med applikationskod
                som en blandning av arbetet i webtec (exempelvis skapa olika sidor/views osv.) och arbetet i design (Ramverk Pico som också innehöll en del twig filer).
            </p>
            <h3>TIL</h3>
            <p>
                Mer om objektorienterad PHP: arv (i praktik), komposition (i praktik), trait (i teori) och interface (i teori). Namespace och hur man startar session i symfony.
            </p>
            <h2 id="kmom03">kmom03</h2>
            <p>
                Jag känner absolut att skriva psuedokod och rita flödeschema var något som hjälpte mig mycket. Jag upplever att vanligt fall när vi arbetar med uppgifter finns det
                särskilda krav som på ett smidigt sätt stöder lösning av ett större problem och på det viset blir det ofta lättare att börja lösa uppgiften. Uppgiften kontextualseras
                automatisk av sina krav. Ett sådant problem som vi hade den här veckan kan verka mer abstrakta i början eftersom man måste skapa en kontext till problemet själv. Jag
                upplever alltid att det svåraste är att veta var och när man ska börja. Jag tyckte om tipsen KISS så att det blir en lättare start. Sen när man har kommit in i problemet
                då kan man lägga fokus på mer avancerade detaljer.
            </p>
            <p>
                Flödesschema och pseudokod gav mig en bättre bild på kontexten så att jag kunde bryta ner problemet och arbeta med mindre och mer konkreta delar. Dvs. jag byggde mina
                egna mindre krav för att nå målen som kunde testas innan fortsättning till nästa nivå så att jag kunde undvik att hamna i en komplex labyrint. Min lösning blev en
                blandning av top down och bottom up strategin. Jag upplever att det är lika viktigt att kunna titta på problemet utifrån ett komplex perspektiv också så som att kunna titta på
                ett problem i mindre delar. För mig blev det först att bryta ner på problemet till mindre delar och sedan när jag var klar med mina egna krav då behövde jag ändå kolla
                på problemet utifrån ett större perspektiv för att kontrollera sammanhanget mellan mindre delar. En sista sak som jag tror mycket starkt på är att läsa problemet och
                låta hjärna arbeta med det på egen hand innan man ens startar och tack för påminnelse. 

            </p>
            <p>
                Jag behövde inte skriva mycket kod när det gäller att bygga mer klasser. Jag har använt koden från kmom01 och kmom02. Jag behövde skapa en ny klass som ärver från
                Deck(): en klass som jag använt i kmom02. Den nya klassen innehåller två nya metoder som kunde ha skrivits i Deck() men jag ville hålla koden lätt i varje klass. Kod
                i kontroller och router är ganska tunt och i mesta del handlar koden om att anropa metoder och använda session, därför upplever jag att jag löst uppgiften ganska
                effektivt. Jag  skriver en hel del kod i kontroller och skapar flera routes och tempelates för att lösa uppgiften.
            </p>
            <p>
                Jag ångrar mig lite nu i kmom03 att jag körde med den enklaste metoden när det gäller att presentera ett kort. Jag borde ha använt images så att korten kan se lite mer verkliga ut
                och inte som kladd. Jag vågade och orkade inte riktigt att börja om, däremot har jag lagt lite tid på CSS och Twig-filer så att mina kort ser lite bättre ut än vad de
                gjorde från början. Jag tror att det finns mycket potential när det gäller att skriva ren och snygg kod. Jag körde lint och började fixa så att det ser så bra ut som
                möjligt. Jag har kommit upp till nivå-5, det är allt grönt tills det. Därefter dyker det upp några anmärkningar. Annars kodmässigt känner jag mig ganska nöjd just nu,
                jag återanvänder min kod i de flesta fall när det går.
            </p>
            <p>
                Jag upplever inga nyheter eller att jag har blivit tvungen att lära mig nya tekniker i kmom03 när det gäller symfony. Jag tycker att symfony är mycket smidigt när det
                gäller router och hur namespace fungerar men utöver det har den här kmom mer handlat om problemlösning och planera sin kod och exekvera den upplever jag. Jag upplever
                att jag bara har repeterat det som jag hade lärt mig från kmom02 när det gäller symfony annars har det varit utmanande och spännande att planera och lösa uppgiften.
            </p>
            <h3>TIL</h3>
            <p>
                Flödesschema, problemlösning, mer om twig och static funktioner.
            </p>
            <h2 id="kmom04">kmom04</h2>

            <h2 id="kmom05">kmom05</h2>


            <h2 id="kmom06">kmom06</h2>

            <h2 id="kmom10">kmom10</h2>
    </main>

</div>


{% endblock %}