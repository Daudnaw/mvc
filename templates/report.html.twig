{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}
    <div class="two-col-layout">
    <aside class="aside">
        <div>
            <h4>Innehållsförtäckning</h4>
            <ul>
                <li><a href="#kmom01">kmom01</a></li>
                <li><a href="#kmom02">kmom02</a></li>
                <li><a href="#kmom03">kmom03</a></li>
                <li><a href="#kmom04">kmom04</a></li>
                <li><a href="#kmom05">kmom05</a></li>
                <li><a href="#kmom06">kmom06</a></li>
                <li><a href="#kmom10">kmom10</a></li>
            </ul>
        </div>
    </aside>

    <main class="main courier">
            <h1>Redovisning</h1>
            <h2 id="kmom01">kmom01</h2>
            <p>
                Jag har läst kursen objektorienteradpython och upplevde att det var lite nytt tänk då för mig men in i kmom03 kändes allting ganska logiskt. Jag kan lite granna om 
                objektorientering och tycker inte att jag upplevde att den var svår då.
            </p>
            <p>
                Det som man behöver veta, för att kunna skapa en klass i PHP är att objektorienterad programmering är som vanlig (procedurprogrammering) programmering men vi inkapslar
                in metoder (som vi annars kallar för funktioner) och medlemsvariabler (variabler). Vi initierar en class med nyckelordet class och vi kan initiera en objekt som får
                med sig “alla” variabler och metoder som kan nås med this→.
            </p>
            <p>
                Jag upplever att kodbasen påminner ganska mycket om ramverket PICO som vi har arbetat med under kursen design. Jag upplever att de liknar mycket i logiken och i
                strukturen. Inga konstigheter tycker jag och strukturen verkar logisk och enkelt att förstå. Det blir säkert lite komplikationer på vägen men just nu under kmom01
                verkar den mycket lik PICO.
            </p>
            <p>
                Kapitel 4: Language highlights och i den nämns namespaces som låter rimligt och logiskt men jag vill prova öva för att veta mer om hur det fungerar. Kapitel 5:
                Dependency management är också mycket intressant. Nu i kurser får vi nästan alltid färdig bakad när det är arbetsmiljö vilket jag tycker är verkligen bra annars
                skulle man ju fastna mycket i början men det är något jag verkligen skulle vilja lära mig mer om. Det  finns många andra saker också men jag håller mig kort här.
            </p>
            <h3>TIL</h3>
            <p>
                Grunden i symfony liksom om bilder, twig och router. Grundläggande intro till class i objektorienterad PHP.
            </p>
            <h2 id="kmom02">kmom02</h2>
            <p>
                Med hjälp av arv kan en klass ärva metoder och medlemsvariabler från basklassen så att subklass kan specialisera basklass genom att återanvända koden.
                Komposition betyder att en klass innehåller andra objekt från en annan klass som delar sin funktionalitet. Tex. en die och en hand. En hand kan innehålla flera die
                därmed en hand är en komposition av die.
            </p>
            <p>
                Ett trait är som ett multipelarv som kan återanvändas i flera olika klasser. Jag förstår det som att man kan definiera en funktion som en modul som kan anropas från
                samma källa i olika moduler. Men i objektorienterad blir det alltså trait så att samma kod kan användas (use) i flera andra klasser utan arv. Interface är ett löfte
                som tvingar en klass att implementera eller erbjuda metoder. Med hjälp av interface vet man vad en klass kommer att kunna hantera.
            </p>
            <p>
                Jag har tre klasser för att lösa uppgiften: en som skapar en card och en som skapar grafisk presentation av kortet genom att ersätta exempelvis “hearts” mot symbolen
                av hearts. Jag har en tredje klass Deck som då loopar genom två arrays och skapar en hel deck. CardGraphic har Card som basklass och Deck är en composition av
                CardGraphic.
            </p>
            <p>
                För att lösa uppgiften och uppfylla krav skapar jag en deck när landningssida för den här uppgiften öppnas. Det görs endast om det inte finns en befintlig deck och
                mha. det kan man få sin resterande deck i länken card/deck. Om man vill skapa en ny deck, då får man trycka på card/shuffle. När det gäller draw ett eller flera kort
                använder jag mig av metoder som är definierade i Deck klass. Jag är typ nöjd med min presentation av kortlek. Jag utnyttjar twig och kollar om kommande string har
                en viss value för att tilldela css klass så att jag kan få hjärta och rutor röda osv. Det hade kunnat lösa snyggare bilder tycker jag. Jag tror det funkar nu men
                det kan förbättras.När det gäller koden i klasser evaluerar jag med min begränsad kunskap att det ser bra ut. Jag kanske har en annan syn på det om någon vecka då
                får jag ändra koden enligt det.
            </p>
            <p>
                Tankesätt och arbetssätt skiljer väl inte så mycket från tidigare kurser trots att det är viss skillnad i strukturen. Jag upplever jobbet i symfony med applikationskod
                som en blandning av arbetet i webtec (exempelvis skapa olika sidor/views osv.) och arbetet i design (Ramverk Pico som också innehöll en del twig filer).
            </p>
            <h3>TIL</h3>
            <p>
                Mer om objektorienterad PHP: arv (i praktik), komposition (i praktik), trait (i teori) och interface (i teori). Namespace och hur man startar session i symfony.
            </p>
            <h2 id="kmom03">kmom03</h2>
            
            <h2 id="kmom04">kmom04</h2>

            <h2 id="kmom05">kmom05</h2>


            <h2 id="kmom06">kmom06</h2>

            <h2 id="kmom10">kmom10</h2>
    </main>

</div>


{% endblock %}